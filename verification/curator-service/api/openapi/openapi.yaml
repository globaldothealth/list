openapi: 3.0.3
info:
  title: Global Health curator service API
  description: Server for CRUD operations on Global Health data
  termsOfService: "https://www.healthmap.org/about/termsofuse/"
  contact:
    email: info@healthmap.org
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
  version: 1.0.0
paths:
  /auth/register:
    post:
      tags: 
        - Auth
        - User
      summary: Authorize a user for the given roles
      operationId: registerAuth
      requestBody:
        description: User to authorize
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          $ref: "#/components/responses/200Auth"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /sources:
    get:
      tags: [Source]
      summary: Lists sources
      operationId: listSources
      parameters:
        - name: page
          in: query
          description: The pages of sources to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: The number of sources to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: url
          in: query
          description: Origin URL substring on which to filter the result set
          required: false
          allowEmptyValue: true
          allowReserved: true
          schema:
            type: string
        - name: access_token
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/200SourceArray"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags: [Source]
      summary: Creates a new source
      operationId: createSource
      requestBody:
        description: Source to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSource"
      responses:
        "201":
          $ref: "#/components/responses/201Source"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
  /sources/{id}:
    parameters:
      - name: id
        in: path
        description: The source ID
        required: true
        schema:
          type: string
          pattern: '^[a-f\d]{24}$'
    get:
      tags: [Source]
      summary: Gets a specific source
      operationId: getSource
      responses:
        "200":
          $ref: "#/components/responses/200Source"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags: [Source]
      summary: Updates a specific source
      operationId: updateSource
      requestBody:
        description: Source to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Source"
      responses:
        "200":
          $ref: "#/components/responses/200Source"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags: [Source]
      summary: Deletes a specific source
      operationId: deleteSource
      responses:
        "204":
          description: Source deleted
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /cases:
    get:
      tags: [Case]
      summary: Lists cases
      operationId: listCases
      parameters:
        - name: page
          in: query
          description: The pages of sources to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: The number of cases to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: q
          in: query
          description: The search query
          required: false
          allowEmptyValue: true
          allowReserved: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/200CaseArray"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags: [Case]
      summary: Creates a new case
      operationId: createCase
      requestBody:
        description: Case to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCase"
      parameters:
        - name: validate_only
          in: query
          description: Whether to validate the case without creating it
          required: false
          schema:
            type: boolean
            default: false
          allowEmptyValue: true
      responses:
        "201":
          $ref: "#/components/responses/201Case"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags: [Case]
      summary: Upserts a case
      description: >
        Creates or updates a case, depending on whether the provided values for
        the `caseReference.sourceId` and `caseReference.sourceEntryId` fields
        correspond to an existing case record.
      operationId: upsertCase
      requestBody:
        description: Case to upsert
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCase"
      responses:
        "200":
          $ref: "#/components/responses/200Case"
        "201":
          $ref: "#/components/responses/201Case"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
  /cases/batchUpsert:
    post:
      tags: [Case]
      summary: Upserts multiple cases
      operationId: batchUpsertCase
      requestBody:
        description: Cases to upsert
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseArray"
      responses:
        "200":
          $ref: "#/components/responses/200BatchCaseUpsert"
        "207":
          $ref: "#/components/responses/207BatchCaseUpsert"
        "500":
          $ref: "#/components/responses/500"
  /cases/{id}:
    parameters:
      - name: id
        in: path
        description: The case ID
        required: true
        schema:
          type: string
          pattern: '^[a-f\d]{24}$'
    get:
      tags: [Case]
      summary: Gets a specific case
      operationId: getCase
      responses:
        "200":
          $ref: "#/components/responses/200Case"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags: [Case]
      summary: Updates a specific case
      operationId: updateCase
      requestBody:
        description: Case to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Case"
      responses:
        "200":
          $ref: "#/components/responses/200Case"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags: [Case]
      summary: Deletes a specific case
      operationId: deleteCase
      responses:
        "204":
          description: Case deleted
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /geocode/seed:
    post:
      tags: [Geocode]
      summary: Adds geocodes to the geocoding database
      operationId: seedGeocodes
      requestBody:
        description: A single geocode record
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: OK
  /geocode/clear:
    post:
      tags: [Geocode]
      summary: Clears geocodes from the geocoding database
      operationId: clearGeocodes
      responses:
        "200":
          description: OK
  /geocode/suggest:
    get:
      tags: [Geocode]
      summary: Suggests geocodes for a given query string
      operationId: suggestGeocodes
      parameters:
        - name: q
          in: query
          description: The location string for which to find geocodes
          required: true
          allowReserved: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/200GeocodeArray"
  /users:
    get:
      tags: [User]
      summary: Lists users
      operationId: listUsers
      parameters:
        - name: page
          in: query
          description: The pages of users to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: The number of users to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          $ref: "#/components/responses/200UserArray"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: The user ID
        required: true
        schema:
          type: string
          pattern: '^[a-f\d]{24}$'
    put:
      tags: [User]
      summary: Updates a specific user's roles
      operationId: updateUser
      requestBody:
        description: New roles for the user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleArray"
      responses:
        "200":
          $ref: "#/components/responses/200User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
  /users/roles:
    get:
      tags: [User]
      summary: Lists roles available to users
      operationId: listUserRoles
      responses:
        "200":
          $ref: "#/components/responses/200RoleArray"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
components:
  schemas:
    Source:
      description: A complete source; a superset of "#/components/schemas/NewSource" with server-added fields
      allOf:
        - $ref: "#/components/schemas/NewSource"
        - type: object
          # TODO: Define Source object.
    SourceArray:
      type: object
      properties:
        sources:
          type: array
          items:
            $ref: "#/components/schemas/Source"
        nextPage:
          type: integer
        total:
          type: integer
      items:
        $ref: "#/components/schemas/Source"
    NewSource:
      description: The subset of "#/components/schemas/Source" required to create the entity
      type: object
          # TODO: Define NewSource object.
    Case:
      description: A complete case; a superset of "#/components/schemas/NewCase" with server-added fields
      allOf:
        - $ref: "#/components/schemas/NewCase"
        - type: object
          # TODO: Define Case object.
    CaseArray:
      type: object
      properties:
        cases:
          type: array
          items:
            $ref: "#/components/schemas/Case"
      required:
        - cases
    Geocode:
      type: object
      # TODO: Define Geocode object.
    GeocodeArray:
      type: array
      items:
        $ref: "#/components/schemas/Geocode"
    NewCase:
      description: The subset of "#/components/schemas/Case" required to create the entity
      type: object
      # TODO: Define NewCase object.
    User:
      description: A user
      type: object
      properties:
        allOf:
          $ref: "#/components/schemas/RoleArray"
        name:
          type: string
        email:
          type: string
          format: email
        googleID:
          type: string
      required:
        - email
    UserArray:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        total:
          type: integer
    Role:
      type: string
      enum:
        - admin
        - curator
        - reader
    RoleArray:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    Location:
      description: A geo location
      type: object
    LocationArray:
      description: A list of geo locations
      type: array
      items:
        $ref: "#/components/schemas/Location"
    BatchCaseUpsertResponse:
      description: Response to batch upsert case API requests
      properties:
        phase:
          type: string
          description: The last operation completed by the server
          enum:
            - GEOCODE
            - VALIDATE
            - UPSERT
        createdCaseIds:
          type: array
          description: UUIDs of cases created by the batch upsert
          items:
            type: string
        updatedCaseIds:
          type: array
          description: UUIDs of cases updated by the batch upsert
          items:
            type: string
        errors:
          type: array
          items:
            type: object
            properties:
              index:
                type: integer
              message:
                type: string
            required:
              - index
              - message
      required:
        - phase
        - createdCaseIds
        - updatedCaseIds
        - errors
  responses:
    "200Auth":
      description: OK
      content:
        application/json:
          schema:
            type: object
    "200BatchCaseUpsert":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BatchCaseUpsertResponse"
    "207BatchCaseUpsert":
      description: Multi-Status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BatchCaseUpsertResponse"
    "200Case":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Case"
    "200CaseArray":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CaseArray"
    "201Case":
      description: Created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Case"
    "200GeocodeArray":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeocodeArray"
    "200Source":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Source"
    "200SourceArray":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SourceArray"
    "201Source":
      description: Created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Source"
    "200User":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    "200UserArray":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserArray"
    "200RoleArray":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RoleArray"
    "200LocationArray":
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LocationArray"
    "400":
      description: Malformed request
    "403":
      description: Forbidden
    "404":
      description: Not found
    "422":
      description: Unprocessable entity
    "500":
      description: Internal server error
servers:
  - url: http://localhost:3001/api
    description: Local server
